// <auto-generated />
using System;
using Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231202021228_WorkshopManagementSystem_BWM_V8")]
    partial class WorkshopManagementSystem_BWM_V8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Entities.Group", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Data.Entities.Item", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("depth")
                        .HasColumnType("float");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drawings2D")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drawings3D")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("drawingsTechnical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("itemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("length")
                        .HasColumnType("float");

                    b.Property<double>("mass")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("itemCategoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Data.Entities.ItemCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Data.Entities.ItemMaterial", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("materialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("materialId");

                    b.ToTable("ItemMaterial");
                });

            modelBuilder.Entity("Data.Entities.LeaderTask", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("completedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("createById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("itemCompleted")
                        .HasColumnType("int");

                    b.Property<int?>("itemFailed")
                        .HasColumnType("int");

                    b.Property<Guid?>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("itemQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("leaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createById");

                    b.HasIndex("itemId");

                    b.HasIndex("leaderId");

                    b.HasIndex("orderId");

                    b.ToTable("LeaderTask");
                });

            modelBuilder.Entity("Data.Entities.Log", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("modifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("orderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("orderDetailId");

                    b.HasIndex("orderId");

                    b.HasIndex("userId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Data.Entities.Material", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("importPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("materialCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("thickness")
                        .HasColumnType("float");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("materialCategoryId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Data.Entities.MaterialCategory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MaterialCategory");
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("leaderTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("reportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("seen")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("type")
                        .HasColumnType("int");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("workerTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("leaderTaskId");

                    b.HasIndex("orderId");

                    b.HasIndex("reportId");

                    b.HasIndex("userId");

                    b.HasIndex("workerTaskId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("acceptanceTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("assignToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("createdById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("fileContract")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fileQuote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("inProgressTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("quoteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("assignToId");

                    b.HasIndex("createdById");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Data.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("itemCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("itemDepth")
                        .HasColumnType("float");

                    b.Property<string>("itemDrawings2D")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemDrawings3D")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemDrawingsTechnical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("itemHeight")
                        .HasColumnType("float");

                    b.Property<Guid?>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("itemImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("itemLength")
                        .HasColumnType("float");

                    b.Property<double>("itemMass")
                        .HasColumnType("float");

                    b.Property<string>("itemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("orderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Data.Entities.OrderDetailMaterial", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("materialColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("materialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("materialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialSku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("materialThickness")
                        .HasColumnType("float");

                    b.Property<string>("materialUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("materialId");

                    b.HasIndex("orderDetailId");

                    b.ToTable("OrderDetailMaterial");
                });

            modelBuilder.Entity("Data.Entities.Procedure", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Procedure");
                });

            modelBuilder.Entity("Data.Entities.ProcedureItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<Guid>("procedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.HasIndex("procedureId");

                    b.ToTable("ProcedureItem");
                });

            modelBuilder.Entity("Data.Entities.ProcedureStep", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<Guid>("procedureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("stepId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("procedureId");

                    b.HasIndex("stepId");

                    b.ToTable("ProcedureStep");
                });

            modelBuilder.Entity("Data.Entities.Report", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("itemFailed")
                        .HasColumnType("int");

                    b.Property<Guid?>("leaderTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("reportType")
                        .HasColumnType("int");

                    b.Property<Guid>("reporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("responseContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("leaderTaskId");

                    b.HasIndex("orderId");

                    b.HasIndex("reporterId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Data.Entities.Resource", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("reportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("workerTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.HasIndex("reportId");

                    b.HasIndex("workerTaskId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Step", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Data.Entities.Supply", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("materialColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("materialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("materialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialSku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("materialSupplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("materialThickness")
                        .HasColumnType("float");

                    b.Property<string>("materialUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<Guid>("reportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("materialId");

                    b.HasIndex("reportId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("banStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("groupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("roleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("skill")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("groupId");

                    b.HasIndex("roleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Data.Entities.WorkerTask", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("completedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("createById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("feedbackContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("feedbackTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("leaderTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("createById");

                    b.HasIndex("leaderTaskId");

                    b.ToTable("WorkerTask");
                });

            modelBuilder.Entity("Data.Entities.WorkerTaskDetail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("workerTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.HasIndex("workerTaskId");

                    b.ToTable("WorkerTaskDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Item", b =>
                {
                    b.HasOne("Data.Entities.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("itemCategoryId");

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("Data.Entities.ItemMaterial", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany("ItemMaterials")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Material", "Material")
                        .WithMany("ItemMaterials")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Data.Entities.LeaderTask", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("createById");

                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("itemId");

                    b.HasOne("Data.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("leaderId");

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("LeaderTasks")
                        .HasForeignKey("orderId");

                    b.Navigation("CreateBy");

                    b.Navigation("Item");

                    b.Navigation("Leader");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Log", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("itemId");

                    b.HasOne("Data.Entities.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("orderDetailId");

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");

                    b.Navigation("OrderDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Material", b =>
                {
                    b.HasOne("Data.Entities.MaterialCategory", "MaterialCategory")
                        .WithMany("Materials")
                        .HasForeignKey("materialCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialCategory");
                });

            modelBuilder.Entity("Data.Entities.Notification", b =>
                {
                    b.HasOne("Data.Entities.LeaderTask", "LeaderTask")
                        .WithMany()
                        .HasForeignKey("leaderTaskId");

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Data.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("reportId");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.WorkerTask", "WorkerTask")
                        .WithMany()
                        .HasForeignKey("workerTaskId");

                    b.Navigation("LeaderTask");

                    b.Navigation("Order");

                    b.Navigation("Report");

                    b.Navigation("User");

                    b.Navigation("WorkerTask");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.User", "AssignTo")
                        .WithMany("OrdersAssignTo")
                        .HasForeignKey("assignToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "CreatedBy")
                        .WithMany("OrdersCreatedBy")
                        .HasForeignKey("createdById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignTo");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany("OrderDetails")
                        .HasForeignKey("itemId");

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.OrderDetailMaterial", b =>
                {
                    b.HasOne("Data.Entities.Material", "Material")
                        .WithMany("OrderDetailMaterial")
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.OrderDetail", "OrderDetail")
                        .WithMany("OrderDetailMaterials")
                        .HasForeignKey("orderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Data.Entities.ProcedureItem", b =>
                {
                    b.HasOne("Data.Entities.Item", "Item")
                        .WithMany("ProcedureItems")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Procedure", "Procedure")
                        .WithMany("ProcedureItems")
                        .HasForeignKey("procedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Data.Entities.ProcedureStep", b =>
                {
                    b.HasOne("Data.Entities.Procedure", "Procedure")
                        .WithMany("ProcedureSteps")
                        .HasForeignKey("procedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Step", "Step")
                        .WithMany("ProcedureSteps")
                        .HasForeignKey("stepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("Data.Entities.Report", b =>
                {
                    b.HasOne("Data.Entities.LeaderTask", "LeaderTask")
                        .WithMany("Reports")
                        .HasForeignKey("leaderTaskId");

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Data.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("reporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderTask");

                    b.Navigation("Order");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Data.Entities.Resource", b =>
                {
                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("Resources")
                        .HasForeignKey("orderId");

                    b.HasOne("Data.Entities.Report", "Report")
                        .WithMany("Resources")
                        .HasForeignKey("reportId");

                    b.HasOne("Data.Entities.WorkerTask", "WorkerTask")
                        .WithMany("Resources")
                        .HasForeignKey("workerTaskId");

                    b.Navigation("Order");

                    b.Navigation("Report");

                    b.Navigation("WorkerTask");
                });

            modelBuilder.Entity("Data.Entities.Supply", b =>
                {
                    b.HasOne("Data.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Report", "Report")
                        .WithMany("Supplies")
                        .HasForeignKey("reportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("groupId");

                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("roleId");

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.WorkerTask", b =>
                {
                    b.HasOne("Data.Entities.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("createById");

                    b.HasOne("Data.Entities.LeaderTask", "LeaderTask")
                        .WithMany("WorkerTasks")
                        .HasForeignKey("leaderTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("LeaderTask");
                });

            modelBuilder.Entity("Data.Entities.WorkerTaskDetail", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.WorkerTask", "WorkerTask")
                        .WithMany("WorkerTaskDetails")
                        .HasForeignKey("workerTaskId");

                    b.Navigation("User");

                    b.Navigation("WorkerTask");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.Item", b =>
                {
                    b.Navigation("ItemMaterials");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProcedureItems");
                });

            modelBuilder.Entity("Data.Entities.ItemCategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Data.Entities.LeaderTask", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("WorkerTasks");
                });

            modelBuilder.Entity("Data.Entities.Material", b =>
                {
                    b.Navigation("ItemMaterials");

                    b.Navigation("OrderDetailMaterial");
                });

            modelBuilder.Entity("Data.Entities.MaterialCategory", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("LeaderTasks");

                    b.Navigation("OrderDetails");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Data.Entities.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailMaterials");
                });

            modelBuilder.Entity("Data.Entities.Procedure", b =>
                {
                    b.Navigation("ProcedureItems");

                    b.Navigation("ProcedureSteps");
                });

            modelBuilder.Entity("Data.Entities.Report", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("Data.Entities.Step", b =>
                {
                    b.Navigation("ProcedureSteps");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("OrdersAssignTo");

                    b.Navigation("OrdersCreatedBy");
                });

            modelBuilder.Entity("Data.Entities.WorkerTask", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("WorkerTaskDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
